// Copyright 2024 The GWPSan Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>

#include <iostream>
#include <sstream>

#include "gtest/gtest.h"
#include "gwpsan/base/allocator.h"
#include "gwpsan/base/common.h"
#include "gwpsan/base/span.h"
#include "gwpsan/core/arch.h"
#include "gwpsan/core/context.h"
#include "gwpsan/core/decode.h"
#include "gwpsan/core/decoder_executor.h"
#include "gwpsan/core/meta.h"
#include "gwpsan/core/origin.h"

namespace gwpsan {
namespace {

struct Code {
  u8 text[16] = {};
  uptr size = 0;

#if GWPSAN_X64
  // Ctor for x86 code, the instr must be in objdump format ("48 89 c1")
  Code(const char* instr = "") {
    while (*instr) {
      u32 b = -1;
      sscanf(instr, "%x", &b);
      SAN_CHECK_LE(b, 0xff);
      text[size++] = b;
      for (instr += 2; *instr == ' '; instr++) {}
    }
  }
#elif GWPSAN_ARM64
  // Ctor for arm64 code.
  Code(unsigned instr = 0)
      : size(sizeof(instr)) {
    memcpy(text, &instr, sizeof(instr));
  }
#endif
};

using IE = InstructionExecutor;

struct TestWord {
  const uptr val;
  const uptr meta;
  TestWord(uptr val = 0, uptr meta = 0)
      : val(val)
      , meta(meta) {}
};

struct Test {
  const char* desc;
  Code code;
  IE::Flags flags;
  TestWord in[kRegCount];
  TestWord out[kRegCount];
  // Code bytes to place before the decoded instruction
  // (may affect UnwindInstruction).
  Code prologue;
};

// clang-format off
const Test tests[] = {
#if GWPSAN_X64
  {"ud1 0x16(%eax), %eax", "67 0f b9 40 16", IE::kFlagNotExecutable | IE::kFlagException},
  {"ud2", "0f 0b", IE::kFlagNotExecutable | IE::kFlagException},
  {"xor %eax, %eax", "31 c0", 0,
    {[kRAX] = {0xab, 0xbc}}},
  {"mov %rax, %rcx", "48 89 c1", 0,
    {[kRAX] = {11, 0xff}},
    {[kRAX] = {0, 0xff}, [kRCX] = {0, 0xff}}},
  {"mov 0x10(%rax),%rax", "48 8b 40 10", 0,
    {[kRAX] = IE::kDataAddr}},
  {"mov 0x20(%rax), %rcx", "48 8b 48 20", 0,
    {[kRAX] = IE::kDataAddr},
    {},
    "1d"}, // 1d 48 8b 48 20 decodes as: sbb $0x20488b48 %eax -> %eax
  {"lddqu (%rax),%xmm0", "f2 0f f0 00", 0,
    {[kRAX] = IE::kDataAddr}},
  {"vlddqu (%rax),%xmm0", "c5 fb f0 00", 0,
    {[kRAX] = IE::kDataAddr}},
  {"vlddqu (%rax),%ymm0", "c5 ff f0 00", 0,
    {[kRAX] = IE::kDataAddr}},
  {"movss %xmm0,%xmm1", "f3 0f 10 c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"movss (%rax),%xmm0", "f3 0f 10 00", 0,
    {[kRAX] = IE::kDataAddr,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"vmovss (%rax),%xmm1", "c5 fa 10 08", 0,
    {[kRAX] = IE::kDataAddr,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"movss %xmm0,(%rax)", "f3 0f 11 00", 0,
    {[kRAX] = IE::kDataAddr,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"vmovss %xmm0,%xmm1,%xmm2", "c5 f2 10 d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231,
    [kXMM0+2*kVectorRegWords] = 0x4847464544434241, [kXMM0+2*kVectorRegWords+1] = 0x5857565554535251}},
  {"vmovss %xmm1[12byte] %xmm7[4byte] -> %xmm7", "67 4b 4b 4b 4b 67 c5 f2 11 ff", 0,
    {[kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"vmovsd %xmm0[8byte] -> 0xffffffd8(%rbp)[8byte]", "c5 fb 11 45 d8", 0,
    {[kRBP] = IE::kDataAddr + 1000,
    [kXMM0] = 0x2827262524232221, [kXMM0+1] = 0x3837363534333231}},
  {"vmovsd (%rdi,%rsi,8)[8byte] -> %xmm3", "c5 fb 10 1c f7", 0,
    {[kRDI] = IE::kDataAddr,
    [kXMM0+3*kVectorRegWords] = 0x2827262524232221, [kXMM0+3*kVectorRegWords+1] = 0x3837363534333231}},
  {"vmovsd %xmm14[8byte] %xmm7[8byte] -> %xmm15", "c5 0f 10 ff", 0,
    {[kXMM0+14*kVectorRegWords] = 0x2827262524232221, [kXMM0+14*kVectorRegWords+1] = 0x3837363534333231}},
  {"shr $0x0,%rsi", "48 c1 ee 00", 0,
    {[kRSI] = 0x1234567890abcdef}},
  {"shr $0x40,%rsi", "48 c1 ee 40", 0,
    {[kRSI] = 0x1234567890abcdef}},
  {"shr $0x10,%rsi", "48 c1 ee 10", 0,
    {[kRSI] = 0x1234567890abcdef},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry}}},
  {"sar $0xa0 %bh -> %bh", "c0 ff a0"},
  {"sarx %edi %ebp -> %r14d", "c4 62 52 f7 f7", 0,
    {[kRDI] = 0xf7f7f7f7f7f7f7f7, [kRBP] = 0xf7f7f7f7f7f7f7f7}},
  {"shl $0x0f 0xffffffc0(%rbp,%rbx,8)[1byte] -> 0xffffffc0(%rbp,%rbx,8)[1byte]",
    "c0 64 dd c0 0f", IE::kFlagNotExecutable | IE::kFlagException,
    {}},
  {"shl $0xffffffbf %ecx -> %ecx", "c1 e1 bf", 0,
    {[kRCX] = 0xc1c1b9c15bffc1c1},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry}}},
  {"shlx %r15d %r9d -> %r11d", "c4 42 31 f7 df", 0,
    {[kR9] = 0xffffffffffffffff}},
  {"shlx %r15d %r9d -> %r11d", "c4 42 31 f7 df", 0,
    {[kR15] = 0xffffffff0000ab00, [kR9] = 4}},
  {"rol $0xffffffc1 %ecx -> %ecx", "c1 c1 c1", 0,
    {[kRCX] = 0xc1c1c1c1c1c1c1c1}},
  {"rol $0x00000067 %ecx -> %ecx", "c1 c1 67", 0,
    {[kRCX] = 0xc1c1c1c15bffc1c1},
    {[kFLAGS] = {0, kFlagOverflow}}},
  {"rol $0x28 %al -> %al ", "c0 c0 28", 0,
    {[kRAX] = 0xffffffffffffffff},
    {[kFLAGS] = {0, kFlagOverflow}}},
  {"rol %cl %ch -> %ch", "d2 c5", 0,
    {[kRCX] = 0xd8d8dededededede},
    {[kFLAGS] = {0, kFlagOverflow}}},
  {"rol $0xffffffc1 %ecx -> %ecx", "c1 c1 c1", 0,
    {[kRCX] = 0xc1c1c1c15bffc1c1}},
  {"rol %cl %rdi -> %rdi", "48 d3 c7", 0,
    {[kRDI] = 0xc9c9c9c9c9c9c9c1}},
  {"ror %cl %ecx -> %ecx", "67 d3 c9", 0,
    {[kRCX] = 0xc9c9c9c9c9c9c9c1}},
  {"rorx %esi $2 -> %eax", "c4 e3 7b f0 c6 02", 0,
    {[kRAX] = 0xc1c1c1c15bffc1c1, [kRSI] = 0xc9c9c9c9c9c9c9c1}},
  {"shrd %rsi %cl %rax -> %rax", "48 0f ad f0", 0,
    {[kRAX] = 0x0807060504030201, [kRSI] = 0x1817161514131211, [kRCX] = 12},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry}}},
  {"shrd %esi %cl %ebp -> %ebp", "0f ad f5", 0,
    {[kRSI] = 0x40100000}},
  {"data16 shrd %bp $0xfffb 0xac(%rsp,%rbp,4)[2byte] -> 0xac(%rsp,%rbp,4)[2byte]", "40 66 0f ac ac ac ac 00 00 00 fb", 0,
    {[kSP] = IE::kDataAddr},
    {[kFLAGS] = {0, 0xffffffffffffffff}}},
  {"data16 shrd %di $0xffbe %di -> %di", "4d 66 0f ac ff be", 0,
    {[kRDI] = 0xffd0beffac0f66ff},
    {[kRDI] = {0, 0xffffffffffffffff}, [kFLAGS] = {0, 0xffffffffffffffff}}},
  {"data16 shld %ax $0x000f 0x44(%rsp,%rax,2)[2byte] -> 0x44(%rsp,%rax,2)[2byte]", "44 44 66 66 46 66 66 0f a4 44 44 44 0f", 0,
    {[kSP] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry}}},
  {"div %rbx %rdx %rax -> %rdx %rax", "48 f7 f3", IE::kFlagException},
  {"div %ecx %edx %eax -> %edx %eax", "f7 f1", 0,
    {[kRAX] = (0xababababul << 32) + 10, [kRDX] = (0xbabababaul << 32) + 55, [kRCX] = 1000000000},
    {[kFLAGS] = {0, 0xffffffffffffffff}}},
  {"div %ecx %edx %eax -> %edx %eax", "f7 f1", IE::kFlagException,
    {[kRAX] = 10, [kRDX] = (0xbabababaul << 32) + 55, [kRCX] = 1}},
  {"div %dh %ax -> %ah %al", "f6 f6", 0,
    {[kRAX] = (0xababababababul << 16) + 1055, [kRDX] = 100 << 8},
    {[kFLAGS] = {0, 0xffffffffffffffff}}},
  {"div %dh %ax -> %ah %al", "f6 f6", IE::kFlagException,
    {[kRAX] = 100000, [kRDX] = 10 << 8}},
  {"div 0x00(%rcx,%rax)[4byte] %edx %eax -> %edx %eax", "f2 f3 f3 f3 f3 f3 f3 f3 f7 74 01 00", IE::kFlagNoUnwind,
    {[kRAX] = IE::kDataAddr},
    {[kFLAGS] = {0, 0xffffffffffffffff}}},
  {"idiv %rcx %rdx %rax -> %rdx %rax", "48 f7 f9", 0,
    {[kRAX] = 0xab, [kRDX] = 0xcd, [kRCX] = 512},
    {[kFLAGS] = {0, 0xffffffffffffffff}}},
  {"idiv %rcx %rdx %rax -> %rdx %rax", "48 f7 f9", IE::kFlagException,
    {[kRAX] = 0xab, [kRDX] = 0xcd, [kRCX] = 8}},
  {"idiv %rcx %rdx %rax -> %rdx %rax", "48 f7 f9", IE::kFlagException,
    {[kRAX] = 0xab, [kRDX] = 0xcd, [kRCX] = 256}},
  {"idiv %edi %edx %eax -> %edx %eax", "f7 ff", IE::kFlagException,
    {[kRAX] = 0xab, [kRDX] = 0x40100000, [kRDI] = 0x9c9b9a99}},
  {"idiv %eax %edx %eax -> %edx %eax", "f7 f8", 0,
    {[kRAX] = 0xeeeeeeeeeeeeeeee},
    {[kFLAGS] = {0, 0xffffffffffffffff}}},
  {"idivl (%rcx)", "f7 39", IE::kFlagException,
    {[kRCX] = IE::kDataAddr, [kRDX] = 0x8fffffff, [kRAX] = 0xffffffff}},
  {"idiv %rbp %rdx %rax -> %rdx %rax", "44 48 4a 48 f7 fd", IE::kFlagException,
    {[kRBP] = 0xffffffffffffffff, [kRDX] = 0x8000000000000000}},
  {"mov (%rax), %rax", "48 8b 00", IE::kFlagNotExecutable | IE::kFlagException},
  {"mov (%rax), %rax", "48 8b 00", 0,
    {[kRAX] = IE::kDataAddr}},
  // Here access range wraps, so it's fine that unwind fails.
  {"mov (%rax), %rax", "48 8b 00", IE::kFlagNotExecutable | IE::kFlagNoUnwind | IE::kFlagException,
    {[kRAX] = ~0ul}},
  {"mov %rax, (%rax)", "48 89 00", 0,
    {[kRAX] = IE::kDataAddr}},
  {"movd %ebp -> %xmm5", "66 0f 6e ed", 0,
    {[kRBP] = 0xedededededededed}},
  {"movq %xmm2 -> %xmm6", "66 0f d6 d6", 0,
    {[kXMM0 + 2 * kVectorRegWords + 1] = 0xd6d6d6d6d6d6d6d6,
     [kXMM0 + 6 * kVectorRegWords + 1] = 0x76d6d6d6d6d6d6d6}},
  {"vmovd %esi, %xmm0", "c5 f9 6e c6", 0,
    {[kRSI] = 0x1234567890abcdef, [kXMM0 + 0] = 0x42, [kXMM0 + 1] = 0x42,
      [kXMM0 + 2] = 0x42, [kXMM0 + 3] = 0x42, [kXMM0 + 4] = 0x42}},
  {"movdqa %xmm7 -> %es:0x30(%rdi)[16byte]", "66 66 66 66 66 26 66 0f 7f 7f 30", 0,
    {[kRDI] = IE::kDataAddr}},
  {"movdqa %xmm7 -> %es:0x31(%rdi)[16byte]", "66 66 66 66 66 26 66 0f 7f 7f 31", IE::kFlagNotExecutable | IE::kFlagException,
    {[kRDI] = IE::kDataAddr}},
  {"vmovd  %xmm9[4byte] -> (%rdi)[4byte]", "c5 15 7e 0f", IE::kFlagNotExecutable},
  {"movsd (%rdi)[8byte] -> %xmm2", "f2 0f 10 17", 0,
    {[kRDI] = IE::kDataAddr}},
  {"movlps %xmm0[8byte] -> (%rdi)[8byte]", "0f 13 07", 0,
    {[kRDI] = IE::kDataAddr, [kXMM0] = 0x8282828282828282}},
  {"movhlps %xmm7, %xmm15", "46 0f 12 ff", 0,
    {[kXMM0 + 7 * kVectorRegWords] = 0xd6d6d6d6d6d6d6d6,
     [kXMM0 + 7 * kVectorRegWords + 1] = 0x76d6d6d6d6d6d6d6,
     [kXMM0 + 15 * kVectorRegWords] = 0xedededededededed,
     [kXMM0 + 15 * kVectorRegWords + 1] = 0xedededededededed}},
  {"addr32 movhpd %xmm4[8byte] -> 0x0f(%edi)[8byte]", "67 67 67 67 67 66 66 0f 17 67 0f", 0,
    {[kRDI] = IE::kDataAddr}},
  {"addr32 movhpd %xmm1[8byte] -> (%edi)[8byte]", "67 66 67 67 67 67 66 67 0f 17 0f", 0,
    {[kRDI] = IE::kDataAddr,
    [kXMM0 + 1*kVectorRegWords] = 0xd6d6d6d6d6d6d6d6,
    [kXMM0 + 1*kVectorRegWords+1] = 0x8282828282828282}},
  {"movhps %xmm3[8byte] -> %xmm1[8byte]", "0f 16 cb", 0,
    {[kXMM0 + 1*kVectorRegWords] = 0x0807060504030201,
    [kXMM0 + 1*kVectorRegWords+1] = 0x1817161514131211,
    [kXMM0 + 3*kVectorRegWords] = 0x2827262524232221,
    [kXMM0 + 3*kVectorRegWords+1] = 0x3837363534333231}},
  {"cwde %ax -> %ax", "66 98", 0,
    {[kRAX] = 0xbebebebebebebebe}},
  {"cmovbe (%rdi)[4byte] -> %ecx", "0f 46 0f", IE::kFlagNotExecutable | IE::kFlagException},
  {"cmovs %edi -> %edi", "0f 48 ff", 0,
    {[kRDI] = 0xf7f7f7f7f7f7f7f7}},
  {"mul 0x0f(%rax)[1byte] %al -> %ax", "f6 60 0f", IE::kFlagNotExecutable | IE::kFlagException,
    {}},
  {"mul %rbx", "48 f7 e3", 0,
    {[kRAX] = 101, [kRBX] = 202},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"mul %rbx", "48 f7 e3", 0,
    {[kRAX] = 0x4300000042, [kRBX] = 1ul<<32},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"mul %bl", "f6 e3", 0,
    {[kRAX] = 0x2, [kRBX] = 0x3},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"mul %bl", "f6 e3", 0,
    {[kRAX] = 0x44, [kRBX] = 0x55},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"imul %esp $0xcccccccc -> %ecx", "69 cc cc cc cc cc", 0,
    {[kSP] = 0xccccccc4cccc8d00},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"imul %ecx %ebp -> %ebp", "0f af e9", 0,
    {[kRCX] = 0x30000000, [kRBP] = 0x20000000},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"imul %ecx %ebp -> %ebp", "0f af e9", 0,
    {[kRCX] = 0x80000003, [kRBP] = 0x80000002},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"imul %edx $0xffffffca -> %ecx", "6b ca ca", 0,
    {[kRDX] = 0x19ca},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"imul %edx $0xffffffca -> %ecx", "6b ca ca", 0,
    {[kRDX] = 0x3cacaca},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"imul %ebx %eax -> %edx %eax", "f7 eb", 0,
    {[kRAX] = 0x756d693333333333, [kRBX] = 0x3395333333333333},
    {[kFLAGS] = {0, kFlagSign | kFlagZero | kFlagAuxCarry | kFlagParity}}},
  {"mulx %r9,%r8,%r9", "c4 42 bb f6 c9", 0,
    {[kR9] = 0x756d693333333333, [kR8] = 0xccccccc4cccc8d00}},
  {"mulx 0x88(%r14),%rcx,%rbp", "c4 c2 f3 f6 ae 88 00 00 00", 0,
    {[kR14] = IE::kDataAddr, [kRDX] = 0xccccccc4cccc8d00}},
  {"mulx 0x88(%r14)[8byte] %rdx -> %rcx %rbp", "c4 c2 f3 f6 ae 88 00 00 00", 0,
    {[kR14] = IE::kDataAddr, [kRDX] = 0x9696969696969696}},
  {"mulx 0x88(%r14)[8byte] %rdx -> %rcx %rcx", "c4 c2 f3 f6 8e 88 00 00 00", 0,
    {[kR14] = IE::kDataAddr, [kRDX] = 0x9696969696969696}},
  {"syscall", "0f 05", 0,
    {[kRAX] = ~0ul}},
  {"bsr %r11d -> %ebp", "41 0f bd eb", 0,
    {},
    {[kRBP] = {0, 0xffffffffffffffff}, [kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity | kFlagCarry}}},
  {"bsr %r13 -> %rdx", "49 0f bd d5", 0,
    {[kR13] = 2},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity | kFlagCarry}}},
  {"bsr %ecx -> %edx", "0f bd d1", 0,
    {[kRCX] = 64},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity | kFlagCarry}}},
  {"bsf %edx -> %esi", "f3 f2 0f bc f2", 0,
    {},
    {[kRSI] = {0, 0xffffffffffffffff}, [kFLAGS] = {0, kAllFlags & ~kFlagZero}}},
  {"tzcnt %eax,%r13d", "f3 44 0f bc e8", 0,
    {},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"tzcnt %eax,%r13d", "f3 44 0f bc e8", 0,
    {[kRAX] = 0x23},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"tzcnt %eax,%r13d", "f3 44 0f bc e8", 0,
    {[kRAX] = -1},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"tzcnt %rax,%rdx", "f3 48 0f bc d0", 0,
    {[kRAX] = 0xabcd},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"tzcnt %rax,%rdx", "f3 48 0f bc d0", 0,
    {[kRAX] = -1},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"lzcnt %edi,%edx", "f3 0f bd d7", 0,
    {},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"lzcnt %edi,%edx", "f3 0f bd d7", 0,
    {[kRDI] = 0x23},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"lzcnt %edi,%edx", "f3 0f bd d7", 0,
    {[kRDI] = -1},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"lzcnt %r8d,%r10d", "f3 45 0f bd d0", 0,
    {[kR8] = 0xabcd},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"lzcnt %r8d,%r10d", "f3 45 0f bd d0", 0,
    {[kR8] = -1},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"data16 lzcnt  0x401004f6(%rbx,%rbp,4)[2byte] -> %bp", "f3 66 0f bd ac ab f6 04 10 40", 0,
    {},
    {[kFLAGS] = {0, kFlagOverflow | kFlagAuxCarry | kFlagParity | kFlagSign}}},
  {"popcnt %rax,%rax", "f3 48 0f b8 c0", 0,
    {[kRAX] = 0x0807060504030201, [kFLAGS] = kAllFlags}},
  {"popcnt %rax,%rax", "f3 48 0f b8 c0", 0,
    {[kFLAGS] = kAllFlags}},
  {"popcnt (%rax),%eax", "f3 0f b8 00", 0,
    {[kRAX] = IE::kDataAddr, [kFLAGS] = kAllFlags}},
  {"lea %fs:(%rax) -> %eax", "64 8d 00"},
  {"addr32 lea 0x8d8d8d8d(%r13d) -> %r9", "67 4f 8d 8d 8d 8d 8d 8d", 0},
  {"data16 addr32 lea 0xffffff92(%ecx) -> %ax", "66 67 f3 8d 41 92", 0},
  {"vpsrldq $0xff 0x00000b0f(%rbp)[16byte] -> %xmm29",
    "62 a1 15 00 73 9d 0f 0b 00 00 ff", IE::kFlagNotExecutable | IE::kFlagException},
  {"vpsrldq $0x00 %xmm7 -> %xmm10", "c5 29 73 df 00", 0,
    {[kXMM0 + 7 * kVectorRegWords + 1] = 0x8282828282828282}},
  // This produces:
  // emulated and real contexts differ: XMM28L:403020100000000->0 XMM28H:c0b0a0908070605->0
  // The problem is that this is AVX-512 instruction that switches kernel into
  // a different mode of saving/restoring FP context since it needs to save/restore
  // ZMM registers. And we don't restore XMM/YMM registers from that different
  // FP state format in ucontext_t.
  // We either need to understand that FP state format, or detect that this is
  // an AVX-512 instruction and soft fail decoding.
  {"vpslldq $0x03 (%rdx)[16byte] -> %xmm28", "62 21 9d 00 73 3a 03", CPUContext::kFeatureAVX512,
    {[kRDX] = IE::kDataAddr}},
  {"minss %xmm0,%xmm1", "f3 0f 5d c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"minsd %xmm0,%xmm1", "f2 0f 5d c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"vminss %xmm0,%xmm1,%xmm2", "c5 f2 5d d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231,
    [kXMM0+2*kVectorRegWords] = 0x4847464544434241, [kXMM0+2*kVectorRegWords+1] = 0x5857565554535251}},
  {"vminsd %xmm0,%xmm1,%xmm3", "c5 f3 5d d8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231,
    [kXMM0+2*kVectorRegWords] = 0x4847464544434241, [kXMM0+2*kVectorRegWords+1] = 0x5857565554535251}},
  {"maxss %xmm0,%xmm1", "f3 0f 5f c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"maxsd %xmm0,%xmm1", "f2 0f 5f c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"vmaxss %xmm0,%xmm1,%xmm2", "c5 f2 5f d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231,
    [kXMM0+2*kVectorRegWords] = 0x4847464544434241, [kXMM0+2*kVectorRegWords+1] = 0x5857565554535251}},
  {"vmaxsd %xmm0,%xmm1,%xmm3", "c5 f3 5f d8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231,
    [kXMM0+2*kVectorRegWords] = 0x4847464544434241, [kXMM0+2*kVectorRegWords+1] = 0x5857565554535251}},
  {"maxsd %xmm2 %xmm6 -> %xmm6", "f2 0f 5f f2", 0,
    {[kXMM0 + 8] = 0x88888e8888888977}},
  {"maxsd %xmm2 %xmm6 -> %xmm6", "f2 0f 5f f2", 0,
    {[kXMM0+2*kVectorRegWords] = 0xffffffffffffffff}},
  {"vmaxsd %xmm4 %xmm7[8byte] -> %xmm15", "c5 5f 5f ff", 0,
    {[kXMM0+4*kVectorRegWords] = 0xff5fffffffffffff, [kXMM0+7*kVectorRegWords] = 0xffffffffffffffff}},
  {"maxss 0x6c(%rsp,%rbp,2)[4byte] %xmm5[4byte] -> %xmm5[4byte]", "f3 0f 5f 6c 6c 6c", 0,
    {[kSP] = IE::kDataAddr, [kXMM0+5*kVectorRegWords] = 0x80000000}},
  {"vmaxsd %xmm0 %xmm3[8byte] -> %xmm3", "c5 fb 5f db", 0,
    {[kXMM0+3*kVectorRegWords] = 0x80000001}},
  {"cvtsi2sd %edi -> %xmm6", "f2 0f 2a f7", 0,
    {[kRDI] = 0xf7f7f7f7f7f7f7f7}},
  {"cvtss2sd 0x44(%rsp,%rax,2)[4byte] -> %xmm0[8byte]", "66 f3 0f 5a 44 44 44", 0,
    {[kSP] = IE::kDataAddr}},
  {"cvtsi2ss %edi -> %xmm7[4byte]", "65 41 f3 0f 2a ff", 0,
    {[kRDI] = 0xf30041ffff3df262,
    [kXMM0+7*kVectorRegWords] = 0x4847464544434241, [kXMM0+7*kVectorRegWords+1] = 0x5857565554535251}},
  {"cvtsi2ss %r9 -> %xmm0[4byte]", "f3 49 0f 2a c1", 0,
    {[kR9] = 0x111,
    [kXMM0] = 0x4847464544434241, [kXMM0+1] = 0x5857565554535251}},
  {"cvtss2si %xmm7[4byte] -> %rbx", "f3 48 0f 2d df", 0,
    {[kRBX] = 0x5857565554535251,
    [kXMM0] = 0x4847464544434241}},
  {"data16 cvtsd2si 0x01(%rbx)[8byte] -> %ebx", "66 f2 0f 2d 5b 01", 0,
    {[kRBX] = IE::kDataAddr,
    [kXMM0] = 0x4847464544434241}},
  {"cvtsd2si %xmm6[8byte] -> %esi", "f2 0f 2d f6", 0,
    {[kRSI] = 0x8010000000000000}},
  {"cvtsd2si 0x76(%rbx)[8byte] -> %esp", "4f 4f 4f 4f 4f 4f 4f 4f 4f f2 0f 2d 63 76", IE::kFlagException,
    {[kRBX] = IE::kDataAddr}},
  {"cvtss2si %xmm7[4byte] -> %rbx", "f3 48 0f 2d df", IE::kFlagException,
    {[kXMM0+7*kVectorRegWords] = 0x7f800001}},
  {"cvtsd2si %xmm3[8byte] -> %ecx", "f2 0f 2d cb", IE::kFlagException,
    {[kXMM0+3*kVectorRegWords] = 0x7ff0000000000001}},
  {"addr32 cvtsd2si %xmm3[8byte] -> %esi", "67 f2 0f 2d f3", 0,
    {[kXMM0+3*kVectorRegWords] = 0x40c43f7400732524}},
  {"addr32 cvtsd2si %xmm3[8byte] -> %esi", "67 f2 0f 2d f3", 0,
    {[kXMM0+3*kVectorRegWords] = 0x3fe0000000000000}},
  {"addr32 cvtsd2si %xmm3[8byte] -> %esi", "67 f2 0f 2d f3", 0,
    {[kXMM0+3*kVectorRegWords] = 0x3feccccccccccccd}},
  {"addr32 cvtsd2si %xmm3[8byte] -> %esi", "67 f2 0f 2d f3", 0,
    {[kXMM0+3*kVectorRegWords] = 0xbfe0000000000000}},
  {"addr32 cvtsd2si %xmm3[8byte] -> %esi", "67 f2 0f 2d f3", 0,
    {[kXMM0+3*kVectorRegWords] = 0xbfeccccccccccccd}},
  {"cvttss2si %xmm0,%eax", "f3 0f 2c c0", 0,
    {[kXMM0] = 0x3fe0000000000000}},
  {"cvttss2si %xmm0,%rdi", "f3 48 0f 2c f8", 0,
    {[kXMM0] = 0x3feccccccccccccd}},
  {"cvttsd2si %xmm0,%rbx", "f2 48 0f 2c d8", 0,
    {[kXMM0] = 0x3fe0000000000000}},
  {"cvttsd2si %xmm0,%rsi", "f2 48 0f 2c f0", 0,
    {[kXMM0] = 0x3feccccccccccccd}},
  {"vaddps %ymm4 %ymm6 -> %ymm11", "c5 5c 58 de", 0,
    {[kXMM0+4*kVectorRegWords] = 0x7fc00000, [kXMM0+6*kVectorRegWords] = 0x7fc00000}},
  {"vaddps %ymm4 0x67(%rdi)[32byte] -> %ymm12", "c5 5c 58 67 67", 0,
    {[kRDI] = IE::kDataAddr, [kXMM0+4*kVectorRegWords] = 0x40100800}},
  {"subps  %xmm15 %xmm7 -> %xmm7", "41 0f 5c ff", 0,
    {[kXMM0+15*kVectorRegWords+1] = 0x40100000}},
  {"vsubsd %xmm14 %xmm4[8byte] -> %xmm14", "c5 0f 5c f4", 0,
    {[kXMM0+14*kVectorRegWords] = 0x20080000}},
  {"vaddsd %xmm0 (%rsp,%rsi)[8byte] -> %xmm6", "c5 ff 58 34 34", 0,
    {[kSP] = IE::kDataAddr}},
  {"vsubps %ymm4 0x5c(%rsp,%rbx,2)[32byte] -> %ymm11", "c5 5c 5c 5c 5c 5c", 0,
    {[kSP] = IE::kDataAddr}},
  {"vsubpd %ymm7 0x67(%rdi)[32byte] -> %ymm4", "c5 c5 5c 67 67", 0,
    {[kRDI] = IE::kDataAddr}},
  {"subpd 0x62(%rsp,%rbx,2)[16byte] %xmm3 -> %xmm3", "66 0f 5c 5c 5c 62", IE::kFlagNotExecutable | IE::kFlagException,
    {[kSP] = IE::kDataAddr}},
  {"vaddsd %xmm14 %xmm7[8byte] -> %xmm15", "c5 0f 58 ff", 0,
    {[kXMM0+14*kVectorRegWords] = 0x8020000}},
  {"addss %xmm0,%xmm1", "f3 0f 58 c8", 0,
    {[kXMM0] = 0x1111111111111111, [kXMM0+1] = 0x2222222222222222,
    [kXMM0+kVectorRegWords] = 0x3333333333333333, [kXMM0+kVectorRegWords+1] = 0x4444444444444444}},
  {"addsd %xmm0,%xmm1", "f2 0f 58 c8", 0,
    {[kXMM0] = 0x1111111111111111, [kXMM0+1] = 0x2222222222222222,
    [kXMM0+kVectorRegWords] = 0x3333333333333333, [kXMM0+kVectorRegWords+1] = 0x4444444444444444}},
  {"addpd  %xmm4 %xmm1 -> %xmm1", "64 66 0f 58 cc", 0,
    {[kXMM0+1*kVectorRegWords+1] = 0x7ff0000000000001, [kXMM0+4*kVectorRegWords+1] = 0x7ff8000000000000}},
  {"mulss %xmm1,%xmm2", "f3 0f 59 d1", 0,
    {[kXMM0+1*kVectorRegWords] = 0xff10000003, [kXMM0+2*kVectorRegWords] = 0xff20000005}},
  {"mulss %xmm1,%xmm2", "f3 0f 59 d1", 0,
    {[kXMM0+1*kVectorRegWords] = 0x1111111111111111, [kXMM0+2*kVectorRegWords] = 0x2222222222222222}},
  {"mulps %xmm1,%xmm0", "0f 59 c1", 0,
    {[kXMM0] = 0x1111111111111111, [kXMM0+1] = 0x2222222222222222,
    [kXMM0+kVectorRegWords] = 0x3333333333333333, [kXMM0+kVectorRegWords+1] = 0x4444444444444444}},
  {"mulpd %xmm0,%xmm1", "66 0f 59 c8", 0,
    {[kXMM0] = 0x1111111111111111, [kXMM0+1] = 0x2222222222222222,
    [kXMM0+kVectorRegWords] = 0x3333333333333333, [kXMM0+kVectorRegWords+1] = 0x4444444444444444}},
  {"ucomiss %xmm1,%xmm0", "0f 2e c1", 0,
    {[kXMM0] = 0x7ff0000000000001, [kXMM0+kVectorRegWords] = 0x7ff8000000000000}},
  {"ucomiss 0x50(%rax),%xmm0", "0f 2e 40 50", 0,
    {[kRAX] = IE::kDataAddr, [kXMM0] = 0x7ff0000000000001}},
  {"ucomisd %xmm0,%xmm1", "66 0f 2e c8", 0,
    {[kXMM0] = 0x7ff0000000000001, [kXMM0+kVectorRegWords] = 0x7ff8000000000000}},
  {"ucomiss %xmm0[4byte] %xmm1[4byte]", "0f 2e c1", 0,
    {[kXMM0] = 0x7ff0000000000001, [kXMM0+kVectorRegWords] = 0xffffffffff000000}},
  {"ucomiss %xmm0[4byte] %xmm0[4byte]", "0f 2e c0", 0,
    {[kXMM0] = 0x7f800000}},
  {"vpaddw %ymm4,%ymm11,%ymm4", "c5 a5 fd e4", 0,
    {[kXMM0+4*kVectorRegWords] = 0x40c43f7400732524, [kXMM0+11*kVectorRegWords] = 0x5857565554535251}},
  {"vpaddd %ymm7,%ymm11,%ymm3", "c5 a5 fe df", 0,
    {[kXMM0+7*kVectorRegWords] = 0x40c43f7400732524, [kXMM0+11*kVectorRegWords] = 0x5857565554535251}},
  {"vpsubb %xmm0,%xmm2,%xmm2", "c5 e9 f8 d0", 0,
    {[kXMM0] = 0x40c43f7400732524, [kXMM0+2*kVectorRegWords] = 0x5857565554535251}},
  {"vpsubw 0x4e0(%r8),%ymm3,%ymm3", "c4 c1 65 f9 98 e1 04 00 00", 0,
    {[kR8] = IE::kDataAddr, [kXMM0+3*kVectorRegWords] = 0x5857565554535251}},
  {"vpsubd %ymm9,%ymm3,%ymm3", "c4 c1 65 fa d9", 0,
    {[kXMM0+9*kVectorRegWords] = 0x40c43f7400732524, [kXMM0+3*kVectorRegWords] = 0x5857565554535251}},
  {"cmpxchg %al %cl %al -> %cl %al", "0f b0 c1", 0,
    {[kRCX] = 0xc1c1c1c1c1c1c1c1}},
  {"lock cmpxchg16b (%r14)", "f0 49 0f c7 0e", 0,
    {[kR14] = IE::kDataAddr,
     [kRDX] = 0x0f0e0d0c0b0a0908, [kRAX] = 0x0706050403020100}},
  {"lock cmpxchg16b (%r14)", "f0 49 0f c7 0e", 0,
    {[kR14] = IE::kDataAddr}},
  {"lock data16 cmpxchg8b 0x4c(%rsp,%rcx,2)[8byte] %ax %dx %cx %bx -> 0x4c(%rsp,%rcx,2)[8byte] %ax %dx", "66 66 f0 0f c7 4c 4c 4c", 0,
    {[kSP] = IE::kDataAddr}},
  {"xadd %edi %edi -> %edi %edi", "0f c1 ff", 0,
    {[kRDI] = 0xccccccccccccf7f7}},
  {"xadd 0x44(%rsp,%rax,2)[1byte] %al -> 0x44(%rsp,%rax,2)[1byte] %al", "0f c0 44 44 44", IE::kFlagNoUnwind,
    {[kSP] = IE::kDataAddr}},
  {"xchg %ax, %r8w", "66 41 90", 0,
    {[kRAX] = 0x2890909090909090}},
  {"pop %rsp (%rsp) -> %rsp %rsp", "5c", IE::kFlagNoUnwind,
    {[kSP] = IE::kDataAddr}},
  {"pop %rsp (%rsp)[2byte] -> %bx %rsp", "66 5b", 0,
    {[kSP] = IE::kDataAddr}},
  {"popf %rsp (%rsp) -> %rsp", "9d", 0,
    {[kSP] = IE::kDataAddr}},
  {"popf %rsp (%rsp) -> %rsp", "9d", 0,
    {[kSP] = IE::kDataAddr + 8}},
  {"push %rax", "50", 0,
    {[kSP] = IE::kDataAddr + 8}},
  {"push %ax", "66 50", 0,
    {[kSP] = IE::kDataAddr + 8}},
  {"push $1", "6a 01", 0,
    {[kSP] = IE::kDataAddr + 8}},
  {"push %fs %rsp -> %rsp 0xfffffff8(%rsp)[8byte]", "0f a0", 0,
    {[kSP] = IE::kDataAddr + 0x800}},
  {"pushf", "9c", 0,
    {[kSP] = IE::kDataAddr + 8}},
  {"data16 pushf %rsp -> %rsp 0xfffffffe(%rsp)[2byte]", "40 66 66 26 9c", 0,
    {[kSP] = IE::kDataAddr + 0x800}},
  {"leave %rbp %rsp (%rbp)[2byte] -> %rsp %rbp", "66 c9", 0,
    {[kRBP] = IE::kDataAddr + 8}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = 0x1}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = {0, 0xff}},
    {[kRAX] = {0, 0xff}, [kRCX] = {0, 0xff}, [kFLAGS] = {0, kAllFlags}}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = {0xf000, 0xff}},
    {[kRAX] = {0, 0xff}, [kRCX] = {0, 0xff}, [kFLAGS] = {0, kAllFlags & ~kFlagZero}}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = {0xffffffffffffffff, 0xff}},
    {[kRAX] = {0, 0xff}, [kRCX] = {0, 0xff}, [kFLAGS] = {0, kAllFlags & ~kFlagZero}}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = 0xff00, [kRCX] = {0x30000, 0xff00}},
    {[kRCX] = {0, 0x7ff00}, [kFLAGS] = {0, kAllFlags}}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = {0xffffffffffffffff, 0xff}, [kRCX] = {0, 0xff}},
    {[kRAX] = {0, 0xff}, [kRCX] = {0, 0xffffffffffffffff}, [kFLAGS] = {0, kAllFlags}}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = {0xffffffffffffff00, 0xff}, [kRCX] = 0xff},
    {[kRAX] = {0, 0xff}, [kRCX] = {0, 0xffffffffffffffff}, [kFLAGS] = {0, kAllFlags}}},
  {"add %rax, %rcx", "48 01 c1", 0,
    {[kRAX] = {0x110, 0x001}, [kRCX] = {0x010, 0x723}},
    {[kRAX] = {0, 0x01}, [kRCX] = {0, 0xf67}, [kFLAGS] = {0, kAllFlags}}},
  {"add $0xff, %eax", "83 c0 ff", 0},
  {"sub %rbx, %rax", "48 29 d8", 0,
    {[kRAX] = 0x1}},
  {"sub %rbx, %rax", "48 29 d8", 0,
    {[kRBX] = {0, 0xff}},
    {[kRAX] = {0, 0xffffffffffffffff}, [kRBX] = {0, 0xff}, [kFLAGS] = {0, kAllFlags}}},
  {"sub %rbx, %rax", "48 29 d8", 0,
    {[kRAX] = {0, 0xff}},
    {[kRAX] = {0, 0xff}, [kFLAGS] = {0, kAllFlags}}},
  {"sub %rbx, %rax", "48 29 d8", 0,
    {[kRAX] = {0, 0xff}, [kRBX] = {0, 0xff}},
    {[kRAX] = {0, 0xffffffffffffffff}, [kRBX] = {0, 0xff}, [kFLAGS] = {0, kAllFlags}}},
  {"sub %rbx, %rax", "48 29 d8", 0,
    {[kRAX] = {0, 0xff}, [kRBX] = 0xff},
    {[kRAX] = {0, 0xffffffffffffffff}, [kFLAGS] = {0, kAllFlags}}},
  {"adc %r10, %rax", "4c 11 d0", 0,
    {[kRAX] = 0x22, [kR10] = 0x11}},
  {"adc %r10, %rax", "4c 11 d0", 0,
    {[kRAX] = 0x22, [kR10] = 0x11, [kFLAGS] = kFlagCarry}},
  {"adc 0x4f(%rbp)[1byte] %al -> %al", "12 45 4f", 0,
    {[kRBP] = IE::kDataAddr, [kFLAGS] = kAllFlags}},
  {"adc $0xffffffa0 %ecx -> %ecx", "83 d1 a0", 0},
  {"adc %bh %bh -> %bh", "12 ff", 0,
    {[kRBX] = 0x7f00, [kFLAGS] = kFlagCarry}},
  {"adc %cl %bh -> %bh", "10 cf", 0,
    {[kRBX] = 0xcf00, [kFLAGS] = kFlagCarry}},
  {"adc $0xe6127600 %eax -> %eax", "15 00 76 12 e6", 0,
    {[kRAX] = 0x20080000, [kFLAGS] = kFlagCarry}},
  {"adc $0xffffffff %eax -> %eax", "15 ff ff ff ff", 0,
    {[kRAX] = 0x20080000, [kFLAGS] = kFlagCarry}},
  {"adc 0xffffffff(%rcx)[1byte] %al -> %al", "12 41 ff", 0,
    {[kRCX] = IE::kDataAddr + 0x800, [kFLAGS] = kFlagCarry}},
  {"adc %fs:(%rdx,%rcx)[4byte] %eax -> %eax", "26 26 26 26 26 26 26 64 26 26 26 26 13 04 0a", IE::kFlagNotExecutable | IE::kFlagException,
    {[kRCX] = IE::kDataAddr}},
  {"sbb $0x0, %eax", "83 d8 00", 0,
    {[kRAX] = 0x22}},
  {"sbb $0x0, %eax", "83 d8 00", 0,
    {[kRAX] = 0x22, [kFLAGS] = kFlagCarry}},
  {"sbb $0xffffffffffffffff, %r15", "49 83 df ff", 0,
    {[kFLAGS] = kFlagCarry}},
  {"sbb $0xffffffffffffffff, %r15", "49 83 df ff", 0,
    {[kR15] = 0xffffffffffffffff, [kFLAGS] = kFlagCarry}},
  {"sbb %r13, %r13", "4d 19 ed"},
  {"sbb %r13, %r13", "4d 19 ed", 0,
    {[kFLAGS] = kFlagCarry}},
  {"jmp 10", "eb 10", IE::kFlagNotExecutable,
    {},
    {[kPC] = 0x10 + 2}},  // offset + instruction length
  // Yes, this is decoded differently by Intel and AMD.
  {"jo 0", "66 0f 80 00 00 00 00", CPUContext::kFeatureIntel | IE::kFlagIncorrectDecodeLength},
  {"jo 0", "66 0f 80 00 00", CPUContext::kFeatureAMD | IE::kFlagIncorrectDecodeLength},
  {"punpcklbw %xmm0,%xmm1", "66 0f 60 c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpcklwd %xmm0,%xmm1", "66 0f 61 c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpckldq %xmm0,%xmm1", "66 0f 62 c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpcklqdq %xmm0,%xmm1", "66 0f 6c c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpckhbw %xmm0,%xmm1", "66 0f 68 c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpckhwd %xmm0,%xmm1", "66 0f 69 c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpckhdq %xmm0,%xmm1", "66 0f 6a c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"punpckhqdq %xmm0,%xmm1", "66 0f 6d c8", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"vpunpcklbw %ymm0,%ymm1,%ymm2", "c5 f5 60 d0", CPUContext::kFeatureAVX512,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+2] = 0x2827262524232221, [kXMM0+3] = 0x3837363534333231,
    [kXMM0+kVectorRegWords] = 0x4847464544434241, [kXMM0+kVectorRegWords+1] = 0x5857565554535251,
    [kXMM0+kVectorRegWords+2] = 0x6867666564636261, [kXMM0+kVectorRegWords+3] = 0x7877767574737271}},
  {"vpunpcklwd %ymm2 0x00(%rdi)[32byte] -> %ymm4", "c5 ed 61 67 00", CPUContext::kFeatureAVX512,
    {[kRDI] = IE::kDataAddr}},
  {"vpunpckhwd %ymm2 0x00(%rdi)[32byte] -> %ymm4", "c5 ed 69 67 00", CPUContext::kFeatureAVX512,
    {[kRDI] = IE::kDataAddr}},
  {"vpunpcklwd %ymm2 0x00(%rdi)[32byte] -> %ymm4", "c5 ed 61 67 00", CPUContext::kFeatureAVX512,
    {[kRDI] = IE::kDataAddr,
    [kXMM0+2*kVectorRegWords] = 0x0807060504030201, [kXMM0+2*kVectorRegWords+1] = 0x1817161514131211,
    [kXMM0+2*kVectorRegWords+2] = 0x2827262524232221, [kXMM0+2*kVectorRegWords+3] = 0x3837363534333231}},
  {"vpunpckhwd %ymm2 0x00(%rdi)[32byte] -> %ymm4", "c5 ed 69 67 00", CPUContext::kFeatureAVX512,
    {[kRDI] = IE::kDataAddr,
    [kXMM0+2*kVectorRegWords] = 0x0807060504030201, [kXMM0+2*kVectorRegWords+1] = 0x1817161514131211,
    [kXMM0+2*kVectorRegWords+2] = 0x2827262524232221, [kXMM0+2*kVectorRegWords+3] = 0x3837363534333231}},
  {"pshufd %xmm0 $0x00 -> %xmm0", "66 0f 70 c0 00", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"pshufd %xmm0 $0xd4 -> %xmm0", "66 0f 70 c0 d4", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"pshufd %xmm0 $0xb1 -> %xmm0", "66 0f 70 c0 b1", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"pblendw %xmm1 $0x03 %xmm0 -> %xmm0", "66 0f 3a 0e c1 03", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+1*kVectorRegWords] = 0x0807060504030201, [kXMM0+1*kVectorRegWords+1] = 0x1817161514131211}},
  {"pblendw (%rax)[16byte] $0x00 %xmm0 -> %xmm0", "66 0f 3a 0e 00 00", IE::kFlagNotExecutable | IE::kFlagException},
  {"pblendw (%rcx)[16byte] $0x66 %xmm0 -> %xmm0", "66 0f 3a 0e 01 66", 0,
    {[kRCX] = IE::kDataAddr + 0x800}},
  {"pinsrq %rdx $0x01 -> %xmm1[8byte]", "66 48 0f 3a 22 ca 01", 0,
    {[kRDX] = 0x2827262524232221}},
  {"pinsrw $0x9, (%rcx), %xmm1", "66 0f c4 09 09", 0,
    {[kRCX] = IE::kDataAddr,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"vpinsrw $0xb,(%rbx),%xmm0,%xmm1", "c5 f9 c4 0b 0b", 0,
    {[kRBX] = IE::kDataAddr,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"vpinsrw $0x9,%ebx,%xmm0,%xmm1", "c5 f9 c4 cb 09", 0,
    {[kRBX] = 0x2827262524232221,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211}},
  {"addr32 vpinsrw %xmm23[14byte] %cs:0x42(%r10d)[2byte] $0x00 -> %xmm28", "2e 2e 67 62 01 c5 00 c4 62 21 00", CPUContext::kFeatureAVX512,
    {[kR10] = IE::kDataAddr}},
  {"pshufb %xmm1 %xmm0 -> %xmm0", "66 0f 38 00 c1", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x48ff464543440102, [kXMM0+kVectorRegWords+1] = 0x58575655ff535251}},
  {"vpshufb (%r11),%xmm8,%xmm8", "c4 42 39 00 03", 0,
    {[kR11] = IE::kDataAddr,
    [kXMM0+8*kVectorRegWords] = 0x48ff464543440102, [kXMM0+8*kVectorRegWords+1] = 0x58575655ff535251}},
  {"vpshufb %xmm0,%xmm1,%xmm6", "c4 e2 71 00 f0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+kVectorRegWords] = 0x2827262524232221, [kXMM0+kVectorRegWords+1] = 0x3837363534333231}},
  {"vpshufb (%rax),%ymm0,%ymm1", "c4 e2 7d 00 08", 0,
    {[kRAX] = IE::kDataAddr,
    [kXMM0] = 0x0807060504030201, [kXMM0+1] = 0x1817161514131211,
    [kXMM0+2] = 0x2827262524232221, [kXMM0+3] = 0x3837363534333231}},
  {"pextrb $0x8, %xmm1, %ebp", "66 0f 3a 14 cd 08", 0,
    {[kXMM0] = 0x0807060504030201}},
  {"pextrd $0x2, %xmm1, %ecx", "66 0f 3a 16 c9 02", 0,
    {[kXMM0] = 0x0807060504030201}},
  {"pextrq $0x1, %xmm0, %rsi", "66 48 0f 3a 16 c6 01", 0,
    {[kXMM0] = 0x0807060504030201}},
  {"ptest %xmm0,%xmm1", "66 0f 38 17 c8", 0,
    {[kFLAGS] = kAllFlags,
    [kXMM0]                 = 0xff0000ff000ff000, [kXMM0+1]                 = 0x000ff00000ff0000,
    [kXMM0+kVectorRegWords] = 0x000ff000000000f0, [kXMM0+kVectorRegWords+1] = 0x0f00000000000f00}},
  {"ptest %xmm0,%xmm1", "66 0f 38 17 c8", 0,
    {[kXMM0]                 = 0xff0000ff000ff000, [kXMM0+1]                 = 0x000ff00000ff0000,
    [kXMM0+kVectorRegWords] = 0xf00ff000000000f0, [kXMM0+kVectorRegWords+1] = 0x0f00000000000f00}},
  {"vptest %ymm0,%ymm1", "c4 e2 7d 17 c8", 0,
    {[kXMM0]                 = 0x0000000000000f00, [kXMM0+1]                 = 0x0000000000000000,
    [kXMM0+kVectorRegWords] = 0xf000000000000f00, [kXMM0+kVectorRegWords+1] = 0x0000000000000000}},
  {"vptest %ymm0,%ymm1", "c4 e2 7d 17 c8", 0,
    {[kXMM0]                 = 0xf000000000000f00, [kXMM0+1]                 = 0x0000000000000000,
    [kXMM0+kVectorRegWords] = 0x0000000000000f00, [kXMM0+kVectorRegWords+1] = 0x0000000000000000}},
  {"vptest (%rax),%ymm0", "c4 e2 7d 17 00", 0,
    {[kRAX] = IE::kDataAddr}},
  {"ptest %xmm6 0x70(%rax)[16byte]", "66 0f 38 17 70 70", 0,
    {[kRAX] = IE::kDataAddr}},
  {"bt %rax $0x4", "48 0f ba e0 04", 0,
    {[kRAX] = 0x10},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %rax $0x5", "48 0f ba e0 05", 0,
    {[kRAX] = 0x10, [kFLAGS] = kFlagCarry},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %rax $0x44", "48 0f ba e0 44", 0,
    {[kRAX] = 0x10},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %eax, $0x10", "0f ba e0 10", 0,
    {[kRAX] = 0x10000},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %eax, $0x11", "0f ba e0 11", 0,
    {[kRAX] = 0x10000},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %eax, $0x50", "0f ba e0 50", 0,
    {[kRAX] = 0x10000},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %ax, $0x1", "66 0f ba e0 01", 0,
    {[kRAX] = 0x0002},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %ax, $0xe1", "66 0f ba e0 e1", 0,
    {[kRAX] = 0x0002},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt %ax, $0xe2", "66 0f ba e0 e2", 0,
    {[kRAX] = 0x0002},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"btl $0x10, (%rax)", "0f ba 20 10", 0,
    {[kRAX] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"btl $0x12, (%rax)", "0f ba 20 12", 0,
    {[kRAX] = IE::kDataAddr, [kFLAGS] = kFlagCarry},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"btq $0x10, (%rax)", "48 0f ba 20 10", 0,
    {[kRAX] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"btw $0x10, (%rax)", "66 0f ba 20 10", 0,
    {[kRAX] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt 0x74(%rsi)[4byte] $0x6c", "0f ba 66 74 6c", 0,
    {[kRSI] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt (%rdi)[4byte] %ecx", "0f a3 0f", 0,
    {[kRDI] = IE::kDataAddr + 0xffc},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bt (%rdi)[4byte] %ecx", "0f a3 0f", IE::kFlagNotExecutable | IE::kFlagException,
    {[kRDI] = IE::kDataAddr + 0xffe}},
  {"bts %ecx, %ebx", "0f ab cb", 0,
    {[kRCX] = 0x10},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bts %ecx, %ebx", "0f ab cb", 0,
    {[kRCX] = 0x10, [kRBX] = 0x10000},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bts %eax, (%r13)", "41 0f ab 45 00", 0,
    {[kRAX] = 0x2, [kR13] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"btr %edx, %eax", "0f b3 d0", 0,
    {[kRDX] = 0x2, [kRAX] = 0x48ff464543440102},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"lock data16 addr32 btr %sp %fs:0x6c(%ebx,%esi,2)[2byte] -> %fs:0x6c(%ebx,%esi,2)[2byte]", "64 66 67 f0 0f b3 64 73 6c", IE::kFlagNotExecutable | IE::kFlagException,
    {[kRBX] = IE::kDataAddr}},
  {"data16 addr32 btr %di 0x0009(%ecx,%eax)[2byte] -> 0x0009(%ecx,%eax)[2byte]", "67 67 67 f3 67 67 66 0f b3 bc 01 09 00 00 00", 0,
    {[kRCX] = IE::kDataAddr, [kRDI] = 0x105e000f000000e0},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"btc $0x3f, %rsi", "48 0f ba fe 3f", 0,
    {[kRSI] = 0x48ff464543440102},
    {[kFLAGS] = {0, kFlagOverflow | kFlagSign | kFlagAuxCarry | kFlagParity}}},
  {"bzhi %rax,%r8,%r10", "c4 42 f8 f5 d0", 0,
    {[kRAX] = 0xf03, [kR8] = 0xffffffffffffffff},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bzhi %rax,%r8,%r10", "c4 42 f8 f5 d0", 0,
    {[kRAX] = 0x3e, [kR8] = 0xffffffffffffffff},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bzhi %rax,%r8,%r10", "c4 42 f8 f5 d0", 0,
    {[kRAX] = 0x3f, [kR8] = 0xffffffffffffffff},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bzhi %rax,%r8,%r10", "c4 42 f8 f5 d0", 0,
    {[kRAX] = 0x40, [kR8] = 0xffffffffffffffff},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bzhi %rax,%r8,%r10", "c4 42 f8 f5 d0", 0,
    {[kRAX] = 0x41, [kR8] = 0xffffffffffffffff},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bzhi (%rsp,%rbx)[4byte] %ebx -> %r11d", "c4 62 60 f5 1c 1c", 0,
    {[kSP] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bzhi %rsp %r11 -> %r8", "c4 62 a0 f5 c4", 0,
    {[kSP] = IE::kDataAddr},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"blsr %r8d -> %r9d", "c4 42 30 f3 c8", 0,
    {},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"blsr %r8d -> %r9d", "c4 42 30 f3 c8", 0,
    {[kR8] = 0xab00},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"bswap %eax", "0f c8", 0,
    {[kRAX] = 0x2827262524232221}},
  {"bswap %rdx", "48 0f ca", 0,
    {[kRDX] = 0x2827262524232221}},
  {"bswap %esp -> %esp", "66 0f cc", 0,
    {[kSP] = 0x2827262524232221}},
  {"bswap %esp -> %esp", "0f cc", 0,
    {[kSP] = 0x2827262524232221}},
  {"psllw %xmm0,%xmm1", "66 0f f1 c8", 0,
    {[kXMM0] = 0x0,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllw %xmm0,%xmm1", "66 0f f1 c8", 0,
    {[kXMM0] = 0x1,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllw %xmm0,%xmm1", "66 0f f1 c8", 0,
    {[kXMM0] = 0xf,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllw %xmm0,%xmm1", "66 0f f1 c8", 0,
    {[kXMM0] = 0x10,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"pslld %xmm0,%xmm1", "66 0f f2 c8", 0,
    {[kXMM0] = 0x2, [kXMM0+1] = 0x1,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"pslld %xmm0,%xmm1", "66 0f f2 c8", 0,
    {[kXMM0] = 0x20,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"pslld %xmm0,%xmm1", "66 0f f2 c8", 0,
    {[kXMM0] = 0xff0000,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllq %xmm0,%xmm1", "66 0f f3 c8", 0,
    {[kXMM0] = 0x5, [kXMM0+1] = 0x1,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllq %xmm0,%xmm1", "66 0f f3 c8", 0,
    {[kXMM0] = 0x3f, [kXMM0+1] = 0x1,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllq %xmm0,%xmm1", "66 0f f3 c8", 0,
    {[kXMM0] = 0x7f, [kXMM0+1] = 0x1,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"psllw $0x1,%xmm0", "66 0f 71 f0 01", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"pslld $0x20,%xmm0", "66 0f 72 f0 20", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"psllq $0xff,%xmm0", "66 0f 73 f0 ff", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"psllw (%rax),%xmm0", "66 0f f1 00", 0,
    {[kRAX] = IE::kDataAddr,
    [kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"vpsllw %xmm0,%xmm1,%xmm2", "c5 f1 f1 d0", 0,
    {[kXMM0] = 0x2,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221}},
  {"vpsllw %xmm0,%ymm1,%ymm2", "c5 f5 f1 d0", 0,
    {[kXMM0] = 0x2,
    [kXMM0+kVectorRegWords] = 0x1817161514131211, [kXMM0+kVectorRegWords+1] = 0x2827262524232221,
    [kXMM0+kVectorRegWords+2] = 0x0807060504030201, [kXMM0+kVectorRegWords+3] = 0x3837363534333231}},
  {"vpsllq $0x0f %xmm2 -> %xmm10", "c5 29 73 f2 0f", 0,
    {[kXMM0+2*kVectorRegWords] = 0x1817161514131211, [kXMM0+2*kVectorRegWords+1] = 0x2827262524232221}},
  {"pslld 0x71(%rsp,%rbp,2)[16byte] %xmm5 -> %xmm5", "66 0f f2 6c 6c 71", IE::kFlagNotExecutable | IE::kFlagException,
    {[kSP] = IE::kDataAddr}},
  {"pslld (%rsp)[16byte] %xmm4 -> %xmm4", "43 43 43 26 43 43 43 43 43 43 66 0f f2 24 64", 0,
    {[kSP] = IE::kDataAddr + 0xff0, [kXMM0 + 4 * kVectorRegWords] = 0x3837363534333231}},
  {"pslld (%rsp)[16byte] %xmm4 -> %xmm4", "43 43 43 26 43 43 43 43 43 43 66 0f f2 24 64", IE::kFlagNotExecutable | IE::kFlagException,
    {[kSP] = IE::kDataAddr + 0xff8}},
  {"pshuflw $0xb1,%xmm0,%xmm1", "f2 0f 70 c8 b1", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"pshuflw $0x83,(%rax),%xmm1", "f2 0f 70 08 83", 0,
    {[kRAX] = IE::kDataAddr}},
  {"vpshuflw $0xb1,%xmm0,%xmm1", "c5 fb 70 c8 b1", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"vpshuflw $0x83,%ymm0,%ymm1", "c5 ff 70 c8 83", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"pshufhw $0xb1,%xmm0,%xmm1", "f3 0f 70 c8 b1", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"pshufhw $0x83,(%rax),%xmm1", "f3 0f 70 08 83", 0,
    {[kRAX] = IE::kDataAddr}},
  {"vpshufhw $0xb1,%xmm0,%xmm1", "c5 fa 70 c8 b1", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"vpshufhw $0x83,%ymm0,%ymm1", "c5 fe 70 c8 83", 0,
    {[kXMM0] = 0x1817161514131211, [kXMM0+1] = 0x2827262524232221}},
  {"pshuflw 0x00(%r14)[16byte] $0xff -> %xmm6", "4d 49 41 f3 f3 f2 4b 0f 70 76 00 ff", 0,
    {[kR14] = IE::kDataAddr}},
  {"pmovzxwq %xmm1, %xmm2", "66 0f 38 34 d1", 0,
    {[kXMM0 + 1 * kVectorRegWords] = 0x1817161514131211}},
  {"pmovzxwd %xmm0, %xmm0", "66 0f 38 33 c0", 0,
    {[kXMM0] = 0x1817161514131211}},
  {"pmovzxbq %xmm3, %xmm2", "66 0f 38 32 d3", 0,
    {[kXMM0 + 3 * kVectorRegWords] = 0x1817161514131211}},
  {"pmovzxbw (%rdi), %xmm4", "66 0f 38 30 27", 0,
    {[kRDI] = IE::kDataAddr}},
  {"pmovzxbd (%rax,%rdi,1),%xmm0", "66 0f 38 31 04 38", 0,
    {[kRDI] = IE::kDataAddr}},
  {"pmovzxbd 0x40(%rdi),%xmm0", "66 0f 38 31 47 40", 0,
    {[kRDI] = IE::kDataAddr + IE::kDataSize - 0x44}},
  {"psignb %xmm1 %xmm1 -> %xmm1", "66 0f 38 08 c9", 0,
    {[kXMM0 + kVectorRegWords] = 0x0001fffe80102030}},
  {"psignb 0x44(%rsp,%rax,2)[16byte] %xmm0 -> %xmm0", "66 0f 38 08 44 44 44", IE::kFlagNotExecutable | IE::kFlagException,
    {[kSP] = IE::kDataAddr}},
  {"psignb (%rdi)[16byte] %xmm1 -> %xmm1", "66 0f 38 08 0f", 0,
    {[kRDI] = IE::kDataAddr, [kXMM0 + kVectorRegWords] = 0x0001fffe80102030}},
  {"vpsignb %ymm11 (%rax)[32byte] -> %ymm8", "c4 62 25 08 00", 0,
    {[kRAX] = IE::kDataAddr,
     [kXMM0 + 11 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 11 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 11 * kVectorRegWords + 2] = 0xff01ff0080102030,
     [kXMM0 + 11 * kVectorRegWords + 3] = 0x0001fffe8010ff00}},
  {"vpsignd %ymm15 %ymm7 -> %ymm7", "44 44 44 64 c4 a2 05 0a ff", 0,
    {[kXMM0 + 7 * kVectorRegWords] = 0xff800000}},
  {"vpxor %xmm1,%xmm15,%xmm9", "c5 01 ef c9", 0,
    {[kXMM0 + 1 * kVectorRegWords + 0] = 0x1817161514131211,
     [kXMM0 + 1 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 15 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 15 * kVectorRegWords + 1] = 0x2827262524232221}},
  {"vxorps %xmm7,%xmm14,%xmm14", "c5 08 57 f7", 0,
    {[kXMM0 + 7 * kVectorRegWords + 0] = 0x1817161514131211,
     [kXMM0 + 7 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 14 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 14 * kVectorRegWords + 1] = 0x2827262524232221}},
  {"andn %edi,%edx,%r9d", "c4 62 68 f2 cf", 0,
    {[kRDI] = 0x2827262524232221, [kRDX] = 0x1817161514131211},
    {[kFLAGS] = {0, kFlagAuxCarry | kFlagParity}}},
  {"pandn %xmm1,%xmm0", "66 0f df c1", 0,
    {[kXMM0 + 0 * kVectorRegWords + 0] = 0x1817161514131211,
     [kXMM0 + 0 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 1 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 1 * kVectorRegWords + 1] = 0x2827262524232221}},
  {"vpandn %xmm7,%xmm8,%xmm8", "66 0f df c1", 0,
    {[kXMM0 + 7 * kVectorRegWords + 0] = 0x1817161514131211,
     [kXMM0 + 7 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 8 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 8 * kVectorRegWords + 1] = 0x2827262524232221}},
  {"andnpd %xmm2,%xmm1", "66 0f 55 ca", 0,
    {[kXMM0 + 1 * kVectorRegWords + 0] = 0x1817161514131211,
     [kXMM0 + 1 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 2 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 2 * kVectorRegWords + 1] = 0x2827262524232221}},
  {"andnps %xmm0,%xmm1", "0f 55 c8", 0,
    {[kXMM0 + 0 * kVectorRegWords + 0] = 0x1817161514131211,
     [kXMM0 + 0 * kVectorRegWords + 1] = 0x0100fffe80102030,
     [kXMM0 + 1 * kVectorRegWords + 0] = 0x0001fffe80102030,
     [kXMM0 + 1 * kVectorRegWords + 1] = 0x2827262524232221}},
  {"crc32 %eax %edi -> %edi", "f2 0f 38 f1 f8", 0,
    {[kRAX] = {0x1817161514131211, 0x1}, [kRDI] = 0x2827262524232221},
    {[kRAX] = {0, 0x1}, [kRDI] = {0, 0xffffffff}}},
  {"crc32 %eax %edi -> %edi", "f2 0f 38 f1 f8", 0,
    {[kRAX] = 0x1817161514131211, [kRDI] = {0x2827262524232221, 0xf0000000010}},
    {[kRDI] = {0, 0xffffffff}}},
  {"crc32b (%rax), %edi", "f2 0f 38 f0 38", 0,
    {[kRAX] = IE::kDataAddr, [kRDI] = 0x2827262524232221}},
  {"crc32w (%r11), %edi", "66 f2 41 0f 38 f1 3b", 0,
    {[kR11] = IE::kDataAddr, [kRDI] = 0x2827262524232221}},
  {"crc32l (%r11), %edi", "f2 41 0f 38 f1 3b", 0,
    {[kR11] = IE::kDataAddr, [kRDI] = 0x2827262524232221}},
  {"crc32 (%r15,%r14)[8byte] %r12 -> %r12", "66 f2 4f 4f 4f 4f 0f 38 f1 24 37", 0,
    {[kR14] = IE::kDataAddr, [kR12] = 0x2827262524232221}},
  {"xsavec64 %edx %eax -> 0xffffffa6(%rax)", "4d 4b 49 4a 0f c7 60 a6", IE::kFlagNotExecutable | IE::kFlagException | CPUContext::kFeatureXSAVEC,
    {[kRAX] = IE::kDataAddr + 0xfff}},
  {"xsavec64 %edx %eax -> 0x0(%rax)", "4d 4b 49 4a 0f c7 60 00", IE::kFlagNotExecutable | IE::kFlagException | CPUContext::kFeatureXSAVEC,
    {[kRAX] = IE::kDataAddr + 0x20}},
  // We don't know what this instruction stores to memory.
  {"xsavec64 %edx %eax -> 0x0(%rax)", "4d 4b 49 4a 0f c7 60 00", IE::kFlagKnownBuggy | CPUContext::kFeatureXSAVEC,
    {[kRAX] = IE::kDataAddr}},
  {"xrstor 0xac(%rsp,%rbp,4) %edx %eax", "0f ae ac ac ac 00 00 00", IE::kFlagNotExecutable | IE::kFlagException | CPUContext::kFeatureXSAVEC,
    {[kSP] = IE::kDataAddr}},
  {"vzeroall", "c5 fc 77", CPUContext::kFeatureAVX512,
    {[kXMM0 + 15 * kVectorRegWords + 2] = 1,
     [kXMM0 + 15 * kVectorRegWords + 3] = 2,
     [kXMM0 + 31 * kVectorRegWords + 0] = 3,
     [kXMM0 + 31 * kVectorRegWords + 1] = 4,
     [kXMM0 + 31 * kVectorRegWords + 2] = 5,
     [kXMM0 + 31 * kVectorRegWords + 3] = 6}},
  {"kmovb  %k0,%eax", "c5 f9 93 c0", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef}},
  {"kmovw  %k0,%eax", "c5 f8 93 c0", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef}},
  {"kmovd %k0, %eax", "c5 fb 93 c0", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef}},
  {"kmovq  %k0,%rax", "c4 e1 fb 93 c0", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef}},
  {"kmovb  %k0,(%rax)", "c5 f9 91 00", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef, [kRAX] = IE::kDataAddr}},
  {"kmovw  %k0,(%rax)", "c5 f8 91 00", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef, [kRAX] = IE::kDataAddr}},
  {"kmovd %k0, (%rax)", "c4 e1 f9 91 00", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef, [kRAX] = IE::kDataAddr}},
  {"kmovq  %k0,(%rax)", "c4 e1 f8 91 00", CPUContext::kFeatureAVX512,
    {[kK0] = 0x1234567890abcdef, [kRAX] = IE::kDataAddr}},
  {"vpmovzxwd {%k1} (%rbx)[16byte] -> %ymm14", "62 72 7d 29 33 33", CPUContext::kFeatureAVX512,
    {[kK1] = 0xa1a2a3a4a5a6a7a8, [kRBX] = IE::kDataAddr}},
  {"vpmovzxbw {%k3} (%rax)[16byte] -> %ymm11", "62 72 7d 2b 30 18", CPUContext::kFeatureAVX512,
    {[kK3] = 0xa1a2a3a4a5a6a7a8, [kRAX] = IE::kDataAddr}},
  {"vpmovzxbq {%k5} %xmm5[4byte] -> %ymm31", "62 62 7d 2d 32 fd", CPUContext::kFeatureAVX512,
    {[kK5] = 0xa1a2a3a4a5a6a7a8, [kXMM0+5*kVectorRegWords] = 0x0807060504030201}},
  {"vpcmpeqb {%k0} %ymm16 0x20(%rdi)[32byte] -> %k0", "62 f1 7d 20 74 47 01", CPUContext::kFeatureAVX512,
    {[kK0] = 0xa1a2a3a4a5a6a7a8, [kRDI] = IE::kDataAddr,
      [kXMM0+16*kVectorRegWords] = 0x2726252023222120, [kXMM0+16*kVectorRegWords+1] = 0x2726252023222928}},
  {"vpcmpeqb %ymm1 %ymm0 -> %ymm2", "c5 f5 74 d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001}},
  {"vpcmpeqb {%k2} %ymm1 %ymm0 -> %k1", "62 f1 75 2a 74 c8", CPUContext::kFeatureAVX512,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001,
    [kK2] = 0xfffffffffffff733}},
  {"vpcmpeqw %ymm1 %ymm0 -> %ymm2", "c5 f5 75 d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001}},
  {"vpcmpeqw {%k2} %ymm1 %ymm0 -> %k1", "62 f1 75 2a 75 c8", CPUContext::kFeatureAVX512,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001,
    [kK2] = 0xfffffffffffff733}},
  {"pcmpeqd %xmm5 %xmm0 -> %xmm0", "66 0f 76 c5", 0,
    {[kXMM0+5*kVectorRegWords] = 0xfff0000000000000, [kXMM0+5*kVectorRegWords+1] = 0xfff0000000000000}},
  {"vpcmpeqd %ymm1 %ymm0 -> %ymm2", "c5 f5 76 d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001}},
  {"vpcmpeqd {%k2} %ymm1 %ymm0 -> %k1", "62 f1 75 2a 76 c8", CPUContext::kFeatureAVX512,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001,
    [kK2] = 0xfffffffffffff733}},
  {"vpcmpeqq %ymm1 %ymm0 -> %ymm2", "c4 e2 75 29 d0", 0,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001}},
  {"vpcmpeqq {%k2} %ymm1 %ymm0 -> %k1", "62 f2 f5 2a 29 c8", CPUContext::kFeatureAVX512,
    {[kXMM0] = 0x0807060504030201, [kXMM0+kVectorRegWords] = 0x0807060504030001,
    [kK2] = 0xfffffffffffff733}},
#elif GWPSAN_ARM64
  {"ldp x0, x1, [x19]", 0xa9400660, IE::kFlagNotExecutable | IE::kFlagException,
    {[kX0] = 11, [kX1] = 22},
    {[kX0] = 0, [kX1] = 0}},
  {"add %q16 %q16 $0x02 -> %q7", 0x4eb08607, 0,
    {[kQ0 + 16 + kVectorRegWords] = 0x11, [kQ0 + 16 + kVectorRegWords + 1] = 0x22}},
  {"cas x10, x9, [x8]", 0xc8aa7d09, 0,
    {[kX10] = 0x1234, [kX9] = 0x5678, [kX8] = IE::kDataAddr}},
  // TODO(dvyukov): these 2 episodically crash with SIGSEGV for unknown reasons.
  // {"casa %w11 %w10 (%x9)[4byte] -> %w11 (%x9)[4byte]", 0x88eb7d2a, 0,
  //   {[kX10] = 0x1234, [kX11] = 0x5678, [kX9] = IE::kDataAddr}},
  // {"cas x12, x11, [x10]", 0xc8ac7d4b, 0,
  //   {[kX12] = 0x1234, [kX11] = 0x5678, [kX10] = IE::kDataAddr}},
#endif
};
// clang-format on

void SetReg(CPUContext& ctx, int reg, TestWord val) {
  Word w(val.val);
  w.meta.Set(val.meta,
             new OriginChain(new TaintOrigin(Origin::Type::kUninit, "test")));
  ctx.set_reg(static_cast<RegIdx>(reg), w);
}

TEST(Decode, Basic) {
  HeapAllocatorLifetime alloc_lifetime;
  auto& exec = InstructionExecutor::singleton().emplace(false);
  // This can be used to export all test cases as seeds for decoder_fuzzer.
  const char* corpus_dir = getenv("GWPSAN_CORPUS_DIR");
  for (const auto& test : tests) {
    std::cout << "TEST: " << test.desc << std::endl;
    auto flags = test.flags;
    if (flags & IE::kFlagException)
      flags |= IE::kFlagNotExecutable;
    CPUContext ctx;
    for (int reg = 0; reg < kRegCount; ++reg)
      SetReg(ctx, reg, test.in[reg]);
    CPUContext end_ctx;
    for (int reg = 0; reg < kRegCount; ++reg) {
      if (!(flags & IE::kFlagException) && !(flags & IE::kFlagNotExecutable))
        ASSERT_EQ(test.out[reg].val, 0);
      SetReg(end_ctx, reg, test.out[reg]);
    }
    if (end_ctx.reg(kPC).val == 0)
      end_ctx.set_reg(kPC, test.code.size);
    Span<const u8> code{test.code.text, test.code.size};
    const auto& data = InstructionExecutor::FuzzerEncode(code, ctx);
    if (corpus_dir) {
      std::stringstream fname;
      fname << corpus_dir << "/" << &test - tests;
      int fd = open(fname.str().c_str(), O_WRONLY | O_CREAT, 0600);
      EXPECT_NE(fd, -1);
      EXPECT_EQ(write(fd, data.data(), data.size()), data.size());
      close(fd);
    }
    exec.Execute(code, {test.prologue.text, test.prologue.size}, ctx, flags,
                 &end_ctx);
  }
  InstructionExecutor::singleton().reset();
}

TEST(Decode, OpcodeName) {
  for (uptr opcode = 0; opcode <= ArchDecoder::kMaxOpcodes + 1; opcode++)
    Printf("%zu: %s\n", opcode, ArchDecoder::OpcodeName(opcode));
}

}  // namespace
}  // namespace gwpsan
